# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.13.1)

SET(ENABLE_LTO OFF CACHE BOOL "Whether to enable link-time optimization")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_PROCESSOR Pulp)

SET(TOOLCHAIN
    "llvm"
    CACHE STRING "compliation with llvm or gcc"
)

SET(CMAKE_TOOLCHAIN_FILE "cmake/toolchain_${TOOLCHAIN}.cmake")

SET(PULP_FREERTOS_DIR
    ""
    CACHE PATH "install location for pulp-freertos toolchain"
)

SET(RISCV_ELF_GCC_PREFIX
    ""
    CACHE PATH "install location for riscv-gcc toolchain"
)
SET(RISCV_ELF_GCC_BASENAME
    "riscv32-unknown-elf"
    CACHE STRING "base name of the toolchain executables"
)
SET(RISCV_ARCH
    "rv32imac"
    CACHE STRING "march argument to the compiler"
)
# set(RISCV_ARCH "rv32imac" CACHE STRING "march argument to the compiler")
SET(RISCV_ABI
    "ilp32"
    CACHE STRING "mabi argument to the compiler"
)
SET(TC_PREFIX "${RISCV_ELF_GCC_PREFIX}/bin/${RISCV_ELF_GCC_BASENAME}-")


project(microtvm_autogenerated_project)

ADD_DEFINITIONS(-march=${RISCV_ARCH})
ADD_DEFINITIONS(-mabi=${RISCV_ABI})

INCLUDE(PulpTarget)

SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} \
    -Os \
    -ffunction-sections \
    -fdata-sections \
    -fno-rtti \
    -fno-exceptions \
    -fno-threadsafe-statics \
")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} \
    -Os \
    -ffunction-sections \
    -fdata-sections \
")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} \
    -Xlinker --gc-sections \
    -Xlinker -Map=linker.map \
    -Xlinker --cref \
")

ADD_EXECUTABLE_GVSOC_PULP(app src/main.cc)

set(CRT_LIBS common microtvm_rpc_server microtvm_rpc_common graph_executor graph_executor_module aot_executor aot_executor_module memory)
set(CRT_LIB_BASE crt/src/runtime/crt)

list(FIND CRT_LIBS "common" COMMON_IDX)
if(${COMMON_IDX} GREATER 0)
    message(FATAL_ERROR "The 'common' library needs to be at the first position of the CRT_LIBS list")
endif()

ADD_LIBRARY_GVSOC_PULP(tvm_model)
file(GLOB_RECURSE tvm_model_srcs model/codegen/host/src/*.c model/codegen/host/lib/*.o)
target_sources(tvm_model PRIVATE ${tvm_model_srcs})
target_include_directories(tvm_model PRIVATE ${CMAKE_SOURCE_DIR}/include crt_config crt/include model/codegen/host/include/)
target_compile_options(tvm_model PRIVATE -Wno-unused-variable)  # TVM-generated code tends to include lots of these.

foreach(crt_lib_name ${CRT_LIBS})
  ADD_LIBRARY_GVSOC_PULP(${crt_lib_name})
  file(GLOB_RECURSE crt_lib_srcs ${CRT_LIB_BASE}/${crt_lib_name}/*.c ${CRT_LIB_BASE}/${crt_lib_name}/*.cc)
  target_sources(${crt_lib_name} PRIVATE ${crt_lib_srcs})
  TARGET_INCLUDE_DIRECTORIES(${crt_lib_name} PRIVATE crt_config crt/include)
  target_link_libraries(app PRIVATE ${crt_lib_name})
  if(NOT "${crt_lib_name}" STREQUAL "common")
    target_link_libraries(${crt_lib_name} PRIVATE common)
  else()
    target_link_libraries(${crt_lib_name} PRIVATE tvm_model)
  endif()
endforeach(crt_lib_name ${CRT_LIBS})

# define a library for the model sources.
target_link_libraries(graph_executor_module PRIVATE graph_executor)
target_link_libraries(aot_executor_module PRIVATE aot_executor)
target_link_libraries(app PRIVATE tvm_model)

file(GLOB_RECURSE app_srcs src/**.c)
target_sources(app PRIVATE ${app_srcs})
target_include_directories(app PRIVATE crt_config ${CMAKE_SOURCE_DIR}/include crt/include model/codegen/host/include/)


IF("${MEMORY_SIZE_BYTES}" STREQUAL "")
  SET(MEMORY_SIZE_BYTES 65536)
ENDIF()
target_compile_definitions(tvm_model PUBLIC -DMEMORY_SIZE_BYTES=${MEMORY_SIZE_BYTES})


add_custom_target(run
    COMMAND PULP_RISCV_GCC_TOOLCHAIN=${RISCV_ELF_GCC_PREFIX} ${PULP_FREERTOS_DIR}/support/egvsoc.sh --dir=${CMAKE_CURRENT_BINARY_DIR} --config-file=pulp@config_file=chips/pulp/pulp.json --platform=gvsoc --binary=app prepare run
    DEPENDS app
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)
